# Generated by Django 4.0.4 on 2022-06-25 08:39

import compete.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z][a-z0-9]+$', 'Contest identifier must starts with a letter, contains only lowercase letters.'), django.core.validators.MinLengthValidator(4)], verbose_name='contest identifier')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='contest name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_time', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(db_index=True, verbose_name='end time')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='time limit')),
                ('locked_after', models.DateTimeField(blank=True, help_text='Prevent submissions from this contest from being rejudged after this date.', null=True, verbose_name='contest lock')),
                ('is_visible', models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('is_private', models.BooleanField(default=False, verbose_name='private to specific users')),
                ('is_organization_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('scoreboard_cache_duration', models.PositiveIntegerField(default=0, help_text='How long (seconds) should scoreboard will be cached. Set to 0 to disable', verbose_name='scoreboard cache timeout')),
                ('scoreboard_visibility', models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation')], default='V', help_text='Scoreboard visibility through the duration of the contest', max_length=1, verbose_name='scoreboard visibility')),
                ('enable_frozen', models.BooleanField(db_index=True, default=True, help_text="Enable scoreboard/submission freezing, stop showing actual results after 'frozen_time'.", verbose_name='enable contest freezing')),
                ('frozen_time', models.DateTimeField(blank=True, help_text="Timestamp to freeze results, if 'enable_frozen' is True", null=True, verbose_name='freeze after')),
                ('use_clarifications', models.BooleanField(default=False, help_text='Allow participants to use the clarification system.', verbose_name='Allow clarification request')),
                ('is_rated', models.BooleanField(default=False, help_text='Whether this contest can be rated.', verbose_name='contest rated')),
                ('rating_floor', models.IntegerField(blank=True, help_text='Rating floor for contest', null=True, verbose_name='rating floor')),
                ('rating_ceiling', models.IntegerField(blank=True, help_text='Rating ceiling for contest', null=True, verbose_name='rating ceiling')),
                ('rate_all', models.BooleanField(default=False, help_text='Rate all users who joined.', verbose_name='rate all')),
                ('hide_problem_tags', models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags')),
                ('hide_problem_authors', models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors')),
                ('run_pretests_only', models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a contest, then unset prior to rejudging user submissions when the contest ends.', verbose_name='run pretests only')),
                ('show_short_display', models.BooleanField(default=False, help_text='Whether to show a section containing contest settings on the contest page or not.', verbose_name='show short form settings display')),
                ('access_code', models.CharField(blank=True, default='', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code')),
                ('format_name', models.CharField(choices=[('default', 'Default'), ('icpc', 'ICPC'), ('ioi', 'IOI')], default='icpc', help_text='The contest format module to use.', max_length=32, verbose_name='contest format')),
                ('format_config', jsonfield.fields.JSONField(blank=True, help_text='A JSON object to serve as the configuration for the chosen contest format module. Leave empty to use None. Exact format depends on the contest format selected.', null=True, verbose_name='contest format configuration')),
                ('user_count', models.IntegerField(default=0, verbose_name='the amount of live participants')),
                ('points_precision', models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points')),
            ],
            options={
                'verbose_name': 'contest',
                'verbose_name_plural': 'contests',
                'ordering': ['-id'],
                'permissions': (('see_private_contest', 'See private contests'), ('edit_own_contest', 'Edit own contests'), ('edit_all_contest', 'Edit all contests'), ('clone_contest', 'Clone contest'), ('moss_contest', 'MOSS contest'), ('contest_rating', 'Rate contests'), ('contest_access_code', 'Contest access codes'), ('create_private_contest', 'Create private contests'), ('change_contest_visibility', 'Change contest visibility'), ('contest_problem_label', 'Edit contest problem label script'), ('lock_contest', 'Change lock status of contest')),
            },
        ),
        migrations.CreateModel(
            name='ContestParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('real_start', models.DateTimeField(db_column='start', default=django.utils.timezone.now, verbose_name='start time')),
                ('score', models.FloatField(db_index=True, default=0, verbose_name='score')),
                ('cumtime', models.PositiveIntegerField(default=0, verbose_name='cumulative time')),
                ('tiebreaker', models.FloatField(default=0.0, verbose_name='tie-breaking field')),
                ('format_data', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='contest format specific data')),
                ('frozen_time', models.DateTimeField(blank=True, help_text='time when frozen data was last written', null=True, verbose_name='frozen time')),
                ('frozen_score', models.FloatField(db_index=True, default=0, verbose_name='frozen score')),
                ('frozen_cumtime', models.PositiveIntegerField(default=0, verbose_name='frozen cumulative time')),
                ('frozen_tiebreaker', models.FloatField(default=0.0, verbose_name='frozen tie-breaking field')),
                ('frozen_format_data', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='contest format specific data')),
                ('is_disqualified', models.BooleanField(default=False, help_text='Whether this participation is disqualified.', verbose_name='is disqualified')),
                ('virtual', models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation.', verbose_name='virtual participation id')),
            ],
            options={
                'verbose_name': 'contest participation',
                'verbose_name_plural': 'contest participations',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='points')),
                ('partial', models.BooleanField(default=True, verbose_name='partial')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='is pretested')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('output_prefix_override', models.IntegerField(blank=True, default=0, null=True, verbose_name='output prefix length override')),
                ('max_submissions', models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this problem, or leave blank for no limit.', null=True, validators=[compete.models.MinValueOrNoneValidator(1, "Why include a problem you can't submit to?")])),
                ('solved_count', models.PositiveIntegerField(default=0, help_text='Number of users who has solved this problem')),
                ('attempted_count', models.PositiveIntegerField(default=0, help_text='Number of users who has attempted this problem')),
            ],
            options={
                'verbose_name': 'contest problem',
                'verbose_name_plural': 'contest problems',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='ContestSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(default=0.0, verbose_name='points')),
                ('is_pretest', models.BooleanField(default=False, help_text='Whether this submission was ran only on pretests.', verbose_name='is pretested')),
            ],
            options={
                'verbose_name': 'contest submission',
                'verbose_name_plural': 'contest submissions',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ContestTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z-]+$', message='Lowercase letters and hyphens only.')], verbose_name='tag name')),
                ('color', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator('^#(?:[A-Fa-f0-9]{3}){1,2}$', 'Invalid colour.')], verbose_name='tag colour')),
                ('description', models.TextField(blank=True, verbose_name='tag description')),
            ],
            options={
                'verbose_name': 'contest tag',
                'verbose_name_plural': 'contest tags',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(verbose_name='rank')),
                ('rating', models.IntegerField(verbose_name='rating')),
                ('mean', models.FloatField(verbose_name='raw rating')),
                ('performance', models.FloatField(verbose_name='contest performance')),
                ('last_rated', models.DateTimeField(db_index=True, verbose_name='last rated')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='compete.contest', verbose_name='contest')),
                ('participation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='compete.contestparticipation', verbose_name='participation')),
            ],
            options={
                'verbose_name': 'contest rating',
                'verbose_name_plural': 'contest ratings',
            },
        ),
    ]
