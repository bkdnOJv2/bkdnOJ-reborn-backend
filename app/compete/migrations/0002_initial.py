# Generated by Django 4.0.4 on 2022-06-25 08:39

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('compete', '0001_initial'),
        ('userprofile', '0001_initial'),
        ('problem', '0001_initial'),
        ('submission', '0001_initial'),
        ('organization', '0002_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='rating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='userprofile.userprofile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='contestsubmission',
            name='participation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='compete.contestparticipation', verbose_name='participation'),
        ),
        migrations.AddField(
            model_name='contestsubmission',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='compete.contestproblem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='contestsubmission',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contest', to='submission.submission', verbose_name='submission'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='compete.contest', verbose_name='contest'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='problem.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='compete.contest', verbose_name='associated contest'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_history', to='userprofile.userprofile', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='contest',
            name='authors',
            field=models.ManyToManyField(help_text='These users will be able to edit the contest.', related_name='authors+', to='userprofile.userprofile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='banned_users',
            field=models.ManyToManyField(blank=True, help_text='Bans the selected users from joining this contest.', to='userprofile.userprofile', verbose_name='Banned users'),
        ),
        migrations.AddField(
            model_name='contest',
            name='collaborators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to edit the contest, but will not be listed as authors.', related_name='collaborators+', to='userprofile.userprofile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='If private, only these organizations may see the contest', to='organization.organization', verbose_name='organizations'),
        ),
        migrations.AddField(
            model_name='contest',
            name='private_contestants',
            field=models.ManyToManyField(blank=True, help_text='If private, only these users may see the contest', related_name='private_contestants+', to='userprofile.userprofile', verbose_name='private contestants'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(through='compete.ContestProblem', to='problem.problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rate_exclude',
            field=models.ManyToManyField(blank=True, related_name='rate_exclude+', to='userprofile.userprofile', verbose_name='exclude from ratings'),
        ),
        migrations.AddField(
            model_name='contest',
            name='reviewers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the contest, but not edit it.', related_name='reviewers+', to='userprofile.userprofile'),
        ),
        migrations.AddField(
            model_name='contest',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='contests', to='compete.contesttag', verbose_name='contest tags'),
        ),
        migrations.AddField(
            model_name='contest',
            name='view_contest_scoreboard',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the scoreboard.', related_name='view_contest_scoreboard', to='userprofile.userprofile', verbose_name='view contest scoreboard'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together={('user', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contestproblem',
            unique_together={('problem', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contestparticipation',
            unique_together={('contest', 'user', 'virtual')},
        ),
    ]
