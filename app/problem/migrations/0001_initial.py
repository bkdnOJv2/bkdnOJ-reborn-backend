# Generated by Django 4.0.4 on 2022-06-25 08:39

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import helpers.problem_data
import problem.models.problem_test_data
import problem.validators.problem_data_zip


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('userprofile', '0001_initial'),
        ('organization', '0002_initial'),
        ('judger', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('shortname', models.SlugField(help_text="This field is used to separate different problems from each other, similar to `problem code'. Only letters [A-Z], numbers [0-9], underscores (_) or hyphens (-) allowed. Max length is 128 characters. e.g. BIGNUM-PRIME, MAZE-3,... ", max_length=128, unique=True, validators=[django.core.validators.MinLengthValidator(4)])),
                ('title', models.CharField(blank=True, default='', help_text='Title for problem', max_length=256)),
                ('content', models.TextField(blank=True, default='', help_text="Problem's statement")),
                ('pdf', models.FileField(blank=True, default=None, null=True, storage=helpers.problem_data.ProblemPDFStorage(), upload_to=helpers.problem_data.problem_directory_pdf, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('source', models.CharField(blank=True, default='', help_text='Sources of the problem. For example: Codeforces Div.2 Round #123 - Problem D.', max_length=2048)),
                ('time_limit', models.FloatField(default=1.0, help_text='The time limit for this problem, in seconds. Fractional seconds (e.g. 1.5) are supported.', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(20.0)])),
                ('memory_limit', models.PositiveIntegerField(default=262144, help_text='The memory limit for this problem, in kilobytes (e.g. 64mb = 65536 kilobytes).', validators=[django.core.validators.MinValueValidator(65536), django.core.validators.MaxValueValidator(1048576)])),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='If this option was False, only users added above (authors, collab,...) may see the problem. If this option was True, this problem is public (anyone can see and submit).', verbose_name='publicly visible')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Publish date of problem', null=True)),
                ('is_organization_private', models.BooleanField(default=False, help_text='If private only added, organizations may see and submit to the problem.')),
                ('submission_visibility_mode', models.CharField(choices=[('FOLLOW', "Follow bkdnOJ's setting."), ('ALWAYS', 'Users can see all submissions'), ('SOLVED', 'Users can see their own, and others if they have solved that problem'), ('ONLY_OWN', 'Users can only see their own submissions.'), ('HIDDEN', 'Submissions will never be visible.')], default='ONLY_OWN', help_text="Determine if users can view submissions for this problem. This is for public problems only. For problems within certain contests, please set the contest's own submission visibility setting.", max_length=16)),
                ('points', models.FloatField(default=100, help_text="Points awarded for problem completion. Points are displayed with a 'p' suffix if partial.", validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='points')),
                ('partial', models.BooleanField(default=False, help_text='Allow solvers to earn points for each testcase they did right.', verbose_name='allow earning partial points')),
                ('short_circuit', models.BooleanField(default=False, help_text='Stop grading as soon as there is one not acceptted testcase.', verbose_name='stop on unacceptted testcase')),
                ('solved_count', models.PositiveIntegerField(default=0, help_text='Number of users who has solved this problem')),
                ('attempted_count', models.PositiveIntegerField(default=0, help_text='Number of users who has attempted this problem')),
                ('allowed_languages', models.ManyToManyField(blank=True, default=[], help_text='List of allowed submission languages.', to='judger.language')),
                ('authors', models.ManyToManyField(blank=True, default=[], help_text='These users may view, edit the problem, and will be listed as Authors on the Problem Detail page.', related_name='authored_problems', to='userprofile.userprofile')),
                ('banned_users', models.ManyToManyField(blank=True, help_text='Bans the selected users from submitting to this problem.', to='userprofile.userprofile', verbose_name='personae non gratae')),
                ('collaborators', models.ManyToManyField(blank=True, default=[], help_text="These users may view, edit the problem, but won't be listed as Authors on the Problem Detail page.", related_name='collaborated_problems', to='userprofile.userprofile')),
                ('organizations', models.ManyToManyField(blank=True, default=[], to='organization.organization', verbose_name='organizations')),
                ('reviewers', models.ManyToManyField(blank=True, default=[], help_text='These users may only view and make submissions to the problem', related_name='reviewed_problems', to='userprofile.userprofile')),
            ],
            options={
                'verbose_name': 'Problem',
                'verbose_name_plural': 'Problems',
                'ordering': ['-created'],
                'permissions': (('clone', 'Can clone/copy all problems'),),
            },
        ),
        migrations.CreateModel(
            name='ProblemTestProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('zipfile', models.FileField(blank=True, null=True, storage=helpers.problem_data.ProblemDataStorage(), upload_to=problem.models.problem_test_data.problem_directory_file, validators=[problem.validators.problem_data_zip.ProblemDataZipFileValidator()])),
                ('generator', models.FileField(blank=True, null=True, storage=helpers.problem_data.ProblemDataStorage(), upload_to=problem.models.problem_test_data.problem_directory_file, verbose_name='generator file')),
                ('output_prefix', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1073741824)], verbose_name='output prefix length')),
                ('output_limit', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1073741824)], verbose_name='output limit length')),
                ('feedback', models.TextField(blank=True, verbose_name='init.yml generation feedback')),
                ('checker', models.CharField(blank=True, choices=[('standard', 'Standard'), ('floats', 'Floats'), ('floatsabs', 'Floats (absolute)'), ('floatsrel', 'Floats (relative)'), ('rstripped', 'Non-trailing spaces'), ('sorted', 'Unordered'), ('identical', 'Byte identical'), ('linecount', 'Line-by-line'), ('custom-PY3', 'Custom checker (Py3)'), ('custom-CPP17', 'Custom checker (C++17)')], max_length=20, verbose_name='checker')),
                ('checker_args', models.TextField(blank=True, help_text='checker arguments as a JSON object', verbose_name='checker arguments')),
                ('custom_checker', models.FileField(blank=True, null=True, storage=helpers.problem_data.ProblemDataStorage(), upload_to=problem.models.problem_test_data.problem_directory_file, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['py'])], verbose_name='Custom checker script/code')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='test_profile', to='problem.problem')),
            ],
            options={
                'verbose_name': 'problem data profile',
                'verbose_name_plural': 'problem data profiles',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(null=True, verbose_name='case position')),
                ('type', models.CharField(choices=[('C', 'Normal case'), ('S', 'Batch start'), ('E', 'Batch end')], default='C', max_length=1, verbose_name='case type')),
                ('input_file', models.CharField(blank=True, max_length=100, verbose_name='input file name')),
                ('output_file', models.CharField(blank=True, max_length=100, verbose_name='output file name')),
                ('generator_args', models.TextField(blank=True, verbose_name='generator arguments')),
                ('points', models.IntegerField(blank=True, null=True, verbose_name='point value')),
                ('is_pretest', models.BooleanField(verbose_name='case is pretest?')),
                ('output_prefix', models.IntegerField(blank=True, default=1000, null=True, verbose_name='output prefix length')),
                ('output_limit', models.IntegerField(blank=True, default=10000000, null=True, verbose_name='output limit length')),
                ('checker', models.CharField(blank=True, choices=[('standard', 'Standard'), ('floats', 'Floats'), ('floatsabs', 'Floats (absolute)'), ('floatsrel', 'Floats (relative)'), ('rstripped', 'Non-trailing spaces'), ('sorted', 'Unordered'), ('identical', 'Byte identical'), ('linecount', 'Line-by-line'), ('custom-PY3', 'Custom checker (Py3)'), ('custom-CPP17', 'Custom checker (C++17)')], max_length=20, verbose_name='checker')),
                ('checker_args', models.TextField(blank=True, help_text='checker arguments as a JSON object', verbose_name='checker arguments')),
                ('test_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='problem.problemtestprofile')),
            ],
            options={
                'verbose_name': 'Test case',
                'verbose_name_plural': 'Test cases',
                'ordering': ['test_profile'],
            },
        ),
        migrations.CreateModel(
            name='LanguageLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_limit', models.FloatField(validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(20.0)], verbose_name='time limit')),
                ('memory_limit', models.IntegerField(validators=[django.core.validators.MinValueValidator(65536), django.core.validators.MaxValueValidator(1048576)], verbose_name='memory limit')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judger.language', verbose_name='language')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_limits', to='problem.problem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'Language-specific resource limit',
                'verbose_name_plural': 'Language-specific resource limits',
                'unique_together': {('problem', 'language')},
            },
        ),
    ]
